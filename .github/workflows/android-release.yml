name: Android Release



# 1 => Controla quando o fluxo de trabalho será executado
on:
  # 2 => Aciona o fluxo de trabalho em eventos de solicitação 
  #      push ou pull para a branch "master"; você pode alterá-lo de acordo com sua exigência.
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

  # 3 => Permite que você execute este fluxo de trabalho manualmente na 
  #      guia Ações do seu repositório GitHub (uma execução de fluxo de 
  #      trabalho é composta por um ou mais trabalhos que podem ser 
  #      executados sequencialmente ou em paralelo).
  workflow_dispatch:

# 4 => Contém um único trabalho chamado build.
jobs:
  # 5 => 
  build:
    # 6 => Contém o tipo de executor no qual a tarefa será executada.
    runs-on: ubuntu-latest

    # 7 => Usa etapas para representar uma sequência de tarefas que serão executadas como parte do trabalho.
    steps:
      # 8 => Prepara seu repositório em $GITHUB_WORKSPACE, para que seu trabalho possa acessá-lo.
      - uses: actions/checkout@v3
      # 9 => Configura o Java para que seu trabalho possa usá-lo para a compilação do aplicativo Flutter.
      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: "12.x"
          cache: 'gradle' # =>  fornecendo o Gradle para ser armazenado em cache em relação ao Java SDK
      # 10 => Configura o Flutter usando o fluxo de trabalho subosito Flutter
      - uses: subosito/flutter-action@v2
        with:
          # 11 => Ajusta-se à versão do Flutter com a qual você está trabalhando.
          flutter-version: "3.0.0"
          channel: 'stable'
          cache: 'true' # => tivando o armazenamento em cache para o Flutter SDK
      # 12 => Executa um único comando usando o shell do executor.
      - name: Get dependencies
        run: flutter pub get

      # Runs a set of commands using the runners shell
      - name: Start release build
        run: flutter build appbundle